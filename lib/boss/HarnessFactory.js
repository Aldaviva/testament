var _         = require('lodash');
var fs        = require('fs');
var Q         = require('q');
var requirejs = require('requirejs');

module.exports.newHarness = function(jobId, suitePaths){
	var deferred = Q.defer();

	var harnessConfig = {
		messagingClient: {
			amqpHostname: '10.4.4.251' //TODO move this to a testament config module
		},
		worker: {
			id: null //random UUID auto-generated by harnessStarter.start
		},
		job: {
			id: jobId
		}
	};
	
	var amdConfig = {
		baseUrl: 'src',
		paths: {
			'almond'  : '../node_modules/almond/almond',
			'chai'    : '../node_modules/chai/chai',
			'lodash'  : '../node_modules/lodash/lodash',
			'mocha'   : '../node_modules/mocha/mocha',
			'myclass' : '../node_modules/myclass/my.class',
			'q'       : '../node_modules/q/q',
			'sockjs'  : 'lib/sockjs-0.3.5', //the version in npm is for node clients, not browser clients
			'stomp'   : 'lib/stomp'         //stomp customized by rabbitmq
		},
		optimize : 'none',
		name     : 'almond',
		include  : ['mocha', 'chai', 'TestamentReporter', 'beforeDescribingSuites'].concat(suitePaths).concat(['harnessStarter']),
		out      : 'harness-'+jobId+'.js',
		
		skipModuleInsertion: true,
		onBuildWrite: function(moduleName, path, contents){
			return "\n\n/******** "+moduleName+" start ********/\n\n"+contents+"\n\n/******** "+moduleName+" end ********/";
		},
		wrap: {
			start : '(function() {',
			end   : '\n\nrequire("harnessStarter").configure('+JSON.stringify(harnessConfig)+').start();\n})();'
		}
	};

	requirejs.optimize(amdConfig, function(files){
		console.log(files);
		fs.readFile(amdConfig.out, 'utf-8', deferred.makeNodeResolver());
	}, function(e){
		deferred.reject(e);
	});

	return deferred.promise;
};