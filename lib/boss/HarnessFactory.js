var _         = require('lodash');
var fs        = require('fs');
var logger    = require('../common/logger')(__filename);
var config    = require('../common/config');
var path      = require('path');
var Q         = require('q');
var requirejs = require('requirejs');

module.exports.newHarness = function(jobId, suitePaths){
	var deferred = Q.defer();

	var harnessConfig = {
		common: {
			amqp: config.common.amqp
		},
		worker: {
			id: null //random UUID auto-generated by harnessStarter.start
		},
		job: {
			id: jobId
		}
	};
	
	var testamentBasePath = path.join(__dirname, '../harness/');
	var relativeSuitePaths = _.map(suitePaths, function(suitePath){
		//RequireJS optimizer doesn't understand absolute filesystem paths
		return path.relative(testamentBasePath, suitePath);
	});

	var node_modules = '../../node_modules';

	var amdConfig = {
		baseUrl: testamentBasePath,
		paths: {
			'almond'  : node_modules + '/almond/almond',
			'chai'    : node_modules + '/chai/chai',
			'lodash'  : node_modules + '/lodash/lodash',
			'mocha'   : node_modules + '/mocha/mocha',
			'myclass' : node_modules + '/myclass/my.class',
			'q'       : node_modules + '/q/q',
			'sockjs'  : 'thirdparty/sockjs-0.3.5', //the version in npm is for node clients, not browser clients
			'stomp'   : 'thirdparty/stomp'         //stomp customized by rabbitmq
		},
		optimize : 'none',
		name     : 'almond',
		include  : ['mocha', 'chai', 'TestamentReporter', 'beforeDescribingSuites'].concat(relativeSuitePaths).concat(['harnessStarter']),
		out      : path.join(__dirname, '../../harness-'+jobId+'.js'),
		
		skipModuleInsertion: true,
		onBuildWrite: function(moduleName, path_, contents){
			return "\n\n/******** "+moduleName+" start ********/\n\n"+contents+"\n\n/******** "+moduleName+" end ********/";
		},
		wrap: {
			start : '(function() {',
			end   : '\n\nrequire("harnessStarter").configure('+JSON.stringify(harnessConfig)+').start();\n})();'
		}
	};

	requirejs.optimize(amdConfig, function(files){
		fs.readFile(amdConfig.out, 'utf-8', deferred.makeNodeResolver());
	}, function(e){
		deferred.reject(e);
	});

	deferred.promise.then(function(){
		fs.unlink(amdConfig.out);
	});

	return deferred.promise;
};